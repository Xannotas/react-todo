{"version":3,"sources":["assets/icons/list.svg","utils/helpers.ts","redux/rootReducer.ts","redux/store.ts","components/common/Input.tsx","components/Sidebar/AddFolderForm.tsx","components/Sidebar/TodoFolder.tsx","components/Sidebar/Sidebar.tsx","components/Content/TodoItem.tsx","components/Content/ContentFolder.tsx","components/Content/AddTodoForm.tsx","components/Content/Content.tsx","App.tsx","index.tsx"],"names":["module","exports","findFolderIdOfState","folders","actionId","indexOf","find","folder","id","persistedState","localStorage","getItem","JSON","parse","currentFolderId","Number","isShowAllFolders","rootReducer","state","action","type","foldersLenght","length","newFolder","color","colorName","title","todos","newTodo","folderId","text","complited","stateCopy","push","map","todo","todoId","newState","filter","newId","curFolderIndex","folderTitle","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","_state","getState","actions","addFolder","deleteFolder","setFolderId","setFolderTitle","addTodo","deleleTodo","compliteTodo","showAllFolders","Input","onBlur","value","className","placeholder","onSubmit","setValue","maxLenght","autoFocus","classNames","onChange","event","newValue","currentTarget","onKeyDown","key","connect","hideFormFolderCreactor","useState","inputValue","setInputValue","colorId","setColorId","handleAddNewFolder","colorList","colors","handleChangeColor","onClick","index","TodoFolder","formDisplay","toggleFormDisplay","src","listSvg","alt","checked","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","ContentFolder","titleFormIsOpen","setTitleFormIsOpen","titleValue","setTitleValue","classTitle","useEffect","handleChangeTitle","points","AddTodoForm","hideTodoForm","todoValue","setTodoValue","handleAddTodo","todoForm","setTodoForm","hasTodos","setItem","stringify","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba165071.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/list.244e2000.svg\";","import { Folder } from './../types';\n\nexport const findFolderIdOfState = (folders: Folder[], actionId: number) => {\n  return folders.indexOf(folders.find(folder => folder.id === actionId) as Folder)\n}","import { Folder, Todo } from './../types';\nimport { findFolderIdOfState } from '../utils/helpers';\nimport { Actions } from './store';\n\nconst initialState = {\n  folders: [] as Folder[],\n  currentFolderId: null as number | null,\n  isShowAllFolders: false as boolean\n}\nexport type InitialState = typeof initialState\n\nconst persistedState: InitialState = {\n  folders: localStorage.getItem('folders') ? JSON.parse(localStorage.getItem('folders')!) : [],\n  currentFolderId: localStorage.getItem('currentFolderId') !== '' ? Number(localStorage.getItem('currentFolderId')) : null,\n  isShowAllFolders: localStorage.getItem('isShowAllFolders') === 'true' ? true : false\n}\n\nconst rootReducer = (state = persistedState, action: Actions): InitialState => {\n  switch (action.type) {\n    case 'FOLDER:ADD': {\n      const foldersLenght = state.folders.length\n      const newFolder: Folder = {\n        id: foldersLenght ? state.folders[foldersLenght - 1].id + 1 : 0,\n        color: action.colorName,\n        title: action.title,\n        todos: []\n      }\n      return {\n        ...state,\n        folders: [...state.folders, newFolder],\n        currentFolderId: newFolder.id,\n        isShowAllFolders: !state.folders.length && false\n      }\n    }\n\n    case 'TODO:ADD': {\n      let newTodo: Todo = {\n        id: state.folders[findFolderIdOfState(state.folders, action.folderId)].todos.length,\n        text: action.text,\n        complited: false\n      }\n      const stateCopy = { ...state, folders: [...state.folders] }\n      stateCopy.folders[action.folderId].todos.push(newTodo)\n      return stateCopy\n    }\n\n    case 'FOLDER:SET-ID': {\n      return {\n        ...state,\n        currentFolderId: action.folderId,\n        isShowAllFolders: false\n      }\n    }\n\n    case 'TODO:SET_COMPLITE': {\n      const stateCopy = { ...state, folders: [...state.folders] }\n      const folderId = findFolderIdOfState(state.folders, action.folderId)\n      stateCopy.folders[folderId].todos.map(todo => todo.id === action.todoId ? todo.complited = !todo.complited : todo)\n      return stateCopy\n    }\n\n    case 'TODO:DELETE': {\n      const newState = { ...state, folders: [...state.folders] }\n      const todos: Todo[] = state.folders[findFolderIdOfState(state.folders, action.folderId)].todos.filter(todo => todo.id !== action.todoId)\n      newState.folders[action.folderId].todos = todos\n\n      return newState\n    }\n\n    case 'FOLDER:DELETE': {\n      let newId: number | null = null\n\n      if (state.folders.length > 1) {\n        const curFolderIndex = findFolderIdOfState(state.folders, action.folderId)\n        if (state.folders[curFolderIndex+1]){\n          newId = state.folders[curFolderIndex+1].id\n        } else if (state.folders[curFolderIndex-1]){\n          newId = state.folders[curFolderIndex-1].id\n        }\n      }\n\n      return {\n        ...state,\n        folders: state.folders.length > 1 ? state.folders.filter(folder => folder.id !== action.folderId) : [],\n        currentFolderId: newId\n      }\n    }\n\n    case 'FOLDER:SHOW-ALL': {\n      return {\n        ...state,\n        isShowAllFolders: true,\n        currentFolderId: null\n      }\n    }\n\n    case 'FOLDER:SET-TITLE': {\n      return {\n        ...state,\n        folders: state.folders.map(folder => folder.id === action.folderId ? { ...folder, title: action.folderTitle } : folder)\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from './rootReducer'\n\nconst store = createStore(\n  rootReducer,\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n// @ts-ignore\nwindow._state = store.getState()\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default store\n\ntype ActionPropsType<T> = T extends { [key: string]: infer U } ? U : never\ntype InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<ActionPropsType<T>>\nexport type Actions = InferActionsType<typeof actions>\n\nexport const actions = {\n  addFolder: (title: string, colorName: string = 'default') => ({ type: 'FOLDER:ADD', title, colorName } as const),\n  deleteFolder: (folderId: number) => ({ type: 'FOLDER:DELETE', folderId } as const),\n  setFolderId: (folderId: number) => ({ type: 'FOLDER:SET-ID', folderId } as const),\n  setFolderTitle: (folderId: number, folderTitle: string) => ({ type: 'FOLDER:SET-TITLE', folderId, folderTitle } as const),\n  addTodo: (folderId: number, text: string) => ({ type: 'TODO:ADD', folderId, text } as const),\n  deleleTodo: (folderId: number, todoId: number) => ({ type: 'TODO:DELETE', folderId, todoId } as const),\n  compliteTodo: (folderId: number, todoId: number) => ({ type: 'TODO:SET_COMPLITE', folderId, todoId } as const),\n  showAllFolders: () => ({ type: 'FOLDER:SHOW-ALL' } as const)\n}","import React from 'react'\nimport classNames from 'classnames'\n\ntype Props = {\n  value: string,\n  className?: string,\n  placeholder?: string,\n  maxLenght?: number\n\n  setValue: (newValue: string) => void,\n  onSubmit: () => void\n}\nconst Input: React.FC<Props & React.InputHTMLAttributes<HTMLInputElement>> = ({ onBlur, value, className, placeholder = '...', onSubmit, setValue, maxLenght = 50 }) => {\n\n  const onChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.currentTarget.value\n    if (newValue.length <= maxLenght) {\n      setValue(newValue)\n    }\n  }\n\n  const handleEnterDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onSubmit()\n    }\n  }\n\n  return (\n    <input autoFocus placeholder={placeholder}\n      className={classNames('input', className)}\n      value={value} onChange={onChangeValue}\n      onBlur={onBlur}\n      onKeyDown={handleEnterDown}\n    />\n  )\n}\nexport default Input","import React, { useState } from 'react'\nimport classNames from 'classnames'\nimport { connect } from 'react-redux'\nimport { RootState, actions } from './../../redux/store'\n\nimport colorList from './../../assets/colorList.json'\nimport Input from '../common/Input'\n\ntype StateProps = {}\ntype DispatchProps = {\n  addFolder: (text: string, color: string) => void\n}\ntype OwnProps = {\n  hideFormFolderCreactor: () => void;\n}\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst AddFolderForm: React.FC<Props> = ({ hideFormFolderCreactor, addFolder }) => {\n  const maxLenght = 30\n  const [inputValue, setInputValue] = useState<string>('')\n  const [colorId, setColorId] = useState<number>(0)\n\n  const handleAddNewFolder = () => {\n    if (inputValue.length > 0 && inputValue.length <= maxLenght) {\n      addFolder(inputValue, colorList.colors[colorId])\n      setInputValue('')\n      hideFormFolderCreactor()\n    }\n  }\n\n  const handleChangeColor = (id: number = 0) => () => {\n    setColorId(id)\n  }\n\n  return (\n    <div className='sidebar__create-folder-form'>\n      <button className='btn btn-close' onClick={hideFormFolderCreactor}>&times;</button>\n      <Input value={inputValue} setValue={setInputValue} maxLenght={maxLenght} placeholder='Название папки' onSubmit={handleAddNewFolder} />\n\n      <div className='sidebar-colors'>\n        {colorList.colors.map((color, index) => {\n          return <button key={color} onClick={handleChangeColor(index)}\n            className={classNames('sidebar-colors__item', 'color-' + color, { 'active': colorId === index })}></button>\n        })}\n      </div>\n\n      <button className='btn btn-submit w100' onClick={handleAddNewFolder}>Добавить</button>\n    </div>\n  )\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>\n  (null, { addFolder: actions.addFolder })(AddFolderForm)","import React from 'react'\nimport classNames from 'classnames'\n\ntype Props = {\n  id: number,\n  title: string,\n  color: string,\n  isShowAllFolders: boolean,\n  currentFolderId: number | null,\n  setFolderId: (folderId: number) => void,\n  deleteFolder: (folderId: number) => void\n}\n\nconst TodoFolder: React.FC<Props> = ({ title, color, id, currentFolderId, setFolderId, deleteFolder, isShowAllFolders }) => {\n  const handleFolderClick = () => {\n    if (id !== currentFolderId) setFolderId(id)\n  }\n\n  const handlerFolderRemove = () => {\n    deleteFolder(id)\n  }\n\n  return (\n    <div className={'sidebar-content__item-wrapper'}>\n      <div className={classNames('sidebar-content__item', { 'active': currentFolderId === id && !isShowAllFolders })} onClick={handleFolderClick}>\n        <i className={classNames('sidebar-content__item-color', `color-${color}`)}></i>\n        <span className='sidebar-content__item-title'>{title}</span>\n      </div>\n      <button className='btn btn-remove d-none' onClick={handlerFolderRemove}>&times;</button>\n    </div>\n  )\n}\n\nexport default TodoFolder","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames'\n\nimport { Folder } from '../../types';\nimport { RootState, actions } from '../../redux/store';\n\nimport listSvg from '../../assets/icons/list.svg';\nimport AddFolderForm from './AddFolderForm';\nimport TodoFolder from './TodoFolder';\n\ntype StateProps = {\n  folders: Folder[],\n  currentFolderId: number | null,\n  isShowAllFolders: boolean\n}\ntype DispatchProps = {\n  setFolderId: (id: number) => void,\n  deleteFolder: (folderId: number) => void,\n  showAllFolders: () => void\n}\ntype OwnProps = {}\n\ntype Props = OwnProps & StateProps & DispatchProps\n\nconst Sidebar: React.FC<Props> = ({ setFolderId, folders, currentFolderId, deleteFolder, showAllFolders, isShowAllFolders }) => {\n  const [formDisplay, toggleFormDisplay] = useState<boolean>(false)\n\n  const showFormFolderCreactor = () => {\n    toggleFormDisplay(true)\n  }\n\n  const hideFormFolderCreactor = () => {\n    toggleFormDisplay(false)\n  }\n\n  const hideFormShowAllFolders = () => {\n    showAllFolders()\n  }\n\n  return (\n    <aside className=\"sidebar\">\n      <div className=\"sidebar-content\">\n        {folders.length > 1 &&\n          <div className={classNames('sidebar-content__item', 'sidebar-content__item-all-todos', { 'active': isShowAllFolders })} onClick={hideFormShowAllFolders}>\n            <i className={'sidebar-content__item-img'}> <img src={listSvg} alt=\"list\" /> </i>\n            <span className='sidebar-content__item-title'>Все задачи</span>\n          </div>\n        }\n\n        {folders.map(folder => <TodoFolder key={folder.id} deleteFolder={deleteFolder} title={folder.title} color={folder.color}\n          id={folder.id} setFolderId={setFolderId} currentFolderId={currentFolderId} isShowAllFolders={isShowAllFolders} />)}\n      </div>\n\n      <div className=\"sidebar__create-folder\">\n        <button className='btn sidebar__create-folder-btn' onClick={showFormFolderCreactor}><i>+</i> Добавить Папку</button>\n        {formDisplay && <AddFolderForm hideFormFolderCreactor={hideFormFolderCreactor} />}\n      </div>\n    </aside>\n  )\n}\n\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState,\n  {\n    setFolderId: actions.setFolderId,\n    deleteFolder: actions.deleteFolder,\n    showAllFolders: actions.showAllFolders\n  })(Sidebar)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState, actions } from '../../redux/store'\n\ntype OwnProps = {\n  todoId: number,\n  folderId: number,\n  text: string,\n  complited: boolean\n}\ntype StateProps = {}\ntype DispathProps = {\n  compliteTodo: (folderId: number, todoId: number) => void,\n  deleleTodo: (folderId: number, todoId: number) => void\n}\ntype Props = OwnProps & DispathProps & StateProps\n\nconst TodoItem: React.FC<Props> = ({ folderId, todoId, complited, text, compliteTodo, deleleTodo }) => {\n  const handleChangeCompleted = () => {\n    compliteTodo(folderId, todoId)\n  }\n\n  const handleTodoDelete = () => {\n    deleleTodo(folderId, todoId)\n  }\n\n  return (\n    <div className='todo-item'>\n      <label className='todo-item-content'>\n        <input type=\"checkbox\" checked={complited} onChange={handleChangeCompleted} />\n        <span className=\"checkbox\">\n          <svg\n            width=\"11\"\n            height=\"8\"\n            viewBox=\"0 0 11 8\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\n              stroke=\"#fff\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </span>\n        <span className='todo-item-content__text'>{text}</span>\n      </label>\n\n      <button className='btn btn-remove' onClick={handleTodoDelete}>&times;</button>\n    </div>\n  )\n}\n\nexport default connect<StateProps, DispathProps, OwnProps, RootState>(null, { compliteTodo: actions.compliteTodo, deleleTodo: actions.deleleTodo })(TodoItem)","import React, { useState, useEffect } from 'react'\nimport classNames from 'classnames'\n\nimport { Todo } from '../../types'\nimport TodoItem from './TodoItem'\nimport Input from '../common/Input'\n\ntype Props = {\n  folderId: number,\n  todos: Todo[],\n  title: string,\n  color: string,\n  setFolderTitle: (folderId: number, folderTitle: string) => void\n}\n\nconst ContentFolder: React.FC<Props> = ({ todos, title, color, folderId, setFolderTitle }) => {\n  const maxLenght = 30\n  const [titleFormIsOpen, setTitleFormIsOpen] = useState<boolean>(false)\n  const [titleValue, setTitleValue] = useState<string>(title)\n\n  const classTitle: string = classNames('content-folder__title', `color-${color}`)\n\n  useEffect(() => {\n    setTitleValue(title)\n  }, [title])\n\n  const handleChangeTitle = () => {\n    setTitleFormIsOpen(false)\n    if (titleValue !== title && titleValue.length <= maxLenght) {\n      const newTitle = titleValue === '' ? 'Без названия' : titleValue\n      setFolderTitle(folderId, newTitle)\n    }\n  }\n\n  const onTitleClick = () => {\n    if (titleValue === 'Без названия') {\n      setTitleValue('')\n    }\n    setTitleFormIsOpen(true)\n  }\n\n  return (\n    <div className=\"content-folder\">\n      {titleFormIsOpen\n        ? <Input className={classTitle} onBlur={handleChangeTitle} placeholder='Название папки' onSubmit={handleChangeTitle} value={titleValue} setValue={setTitleValue} />\n\n        : <h3 onClick={onTitleClick} className={classTitle}>\n          <span>{title}</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 383.947 383.947\"\n            width=\"20px\" height=\"20px\"\n            fill=\"#DFDFDF\"\n          ><g>\n              <polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893\" />\n              <path\n                d=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04 C386.027,77.92,386.027,64.373,377.707,56.053z\"\n              />\n            </g>\n          </svg>\n        </h3>\n      }\n\n      <div className=\"hr\"></div>\n\n      {todos.length > 0 && <div className=\"content-folder__todos\">\n        {todos.map(todo => <TodoItem key={folderId + '_' + todo.id} folderId={folderId} text={todo.text} todoId={todo.id} complited={todo.complited} />)}\n      </div>}\n    </div>\n  )\n}\n\nexport default ContentFolder","import React, { useState } from 'react'\nimport Input from '../common/Input'\n\ntype Props = {\n  folderId: number,\n  hideTodoForm: () => void,\n  addTodo: (folderId: number, text: string) => void\n}\nconst AddTodoForm: React.FC<Props> = ({ hideTodoForm, addTodo, folderId }) => {\n  const maxTodoLenght = 50\n  const [todoValue, setTodoValue] = useState<string>('')\n\n  const handleAddTodo = () => {\n    if (todoValue.length > 0 && todoValue.length <= maxTodoLenght) {\n      addTodo(folderId, todoValue)\n      setTodoValue('')\n    }\n  }\n\n  return (\n    <div className='content-todo-form'>\n      <Input placeholder='Текст задачи' onSubmit={handleAddTodo} value={todoValue} setValue={setTodoValue} maxLenght={maxTodoLenght} />\n      <button className='btn btn-submit' onClick={handleAddTodo}>Добавить Задачу</button>\n      <button className='btn btn-cancel' onClick={hideTodoForm}>Отменить</button>\n    </div>\n  )\n}\n\nexport default AddTodoForm","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Folder } from '../../types'\nimport { findFolderIdOfState } from '../../utils/helpers'\nimport { RootState, actions } from '../../redux/store'\n\nimport ContentFolder from './ContentFolder'\nimport AddTodoForm from './AddTodoForm'\n\ntype OwnProps = {}\ntype StateProps = {\n  folders: Folder[]\n  currentFolderId: number | null\n  isShowAllFolders: boolean\n}\ntype DispatchProps = {\n  addTodo: (folderId: number, text: string) => void\n  setFolderTitle: (folderId: number, folderTitle: string) => void\n}\ntype Props = OwnProps & StateProps & DispatchProps\n\nconst Content: React.FC<Props> = ({ addTodo, folders, currentFolderId, isShowAllFolders, setFolderTitle }) => {\n  const [todoForm, setTodoForm] = useState<boolean>(false)\n  const folderId: number = findFolderIdOfState(folders, currentFolderId!)\n\n  let hasTodos = false\n\n  const showTodoForm = () => {\n    setTodoForm(true)\n  }\n\n  const hideTodoForm = () => {\n    setTodoForm(false)\n  }\n\n  return (\n    <main className=\"content\">\n      {folders.length\n        ? <div className=\"content-folder\">\n          {isShowAllFolders || folderId < 0\n            ? <>\n              {\n                folders.map(folder => {\n                  if (folder.todos.length === 0) return null\n                  hasTodos = true\n                  return <ContentFolder key={folder.id}\n                    todos={folder.todos}\n                    color={folder.color}\n                    title={folder.title}\n                    folderId={folder.id}\n                    setFolderTitle={setFolderTitle} />\n                })\n              }\n              {!hasTodos &&\n                <p className='content__empty'>Задачи отсутствуют</p>\n              }\n            </>\n            : <>\n              <ContentFolder todos={folders[folderId].todos}\n                color={folders[folderId].color}\n                title={folders[folderId].title}\n                folderId={folders[folderId].id}\n                setFolderTitle={setFolderTitle} />\n\n              {todoForm\n                ? <AddTodoForm hideTodoForm={hideTodoForm} addTodo={addTodo} folderId={folderId} />\n                : <button className=\"btn content-folder__add-btn\" onClick={showTodoForm}><i>+</i>Новая задача</button>\n              }\n            </>\n          }\n        </div>\n        : <p className='content__empty'>Задачи отсутствуют</p>\n      }\n    </main>\n  )\n}\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState, { addTodo: actions.addTodo, setFolderTitle: actions.setFolderTitle })(Content)","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\n\nimport './styles/style.scss';\n\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Content from './components/Content/Content'\nimport { Folder } from './types';\nimport { RootState } from './redux/store';\n\ntype DispatchProps = {}\ntype OwnProps = {}\ntype StateProps = {\n  folders: Folder[],\n  currentFolderId: number | null,\n  isShowAllFolders: boolean\n}\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst App: React.FC<Props> = ({folders, currentFolderId, isShowAllFolders}) => {\n  useEffect(() => {\n    localStorage.setItem('folders', JSON.stringify(folders))\n  }, [folders])\n\n  useEffect(() => {\n    localStorage.setItem('currentFolderId', currentFolderId !== null ? currentFolderId.toString() : '')\n  }, [currentFolderId])\n\n  useEffect(() => {\n    localStorage.setItem('isShowAllFolders', isShowAllFolders ? 'true' : 'false')\n  }, [isShowAllFolders])\n\n  return (\n    <div className='app'>\n      <Sidebar />\n      <Content />\n    </div>\n  );\n}\n\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}