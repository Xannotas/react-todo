{"version":3,"sources":["assets/icons/list.svg","components/common/Input.tsx","components/Sidebar/AddFolderForm.tsx","redux/actions.ts","components/Sidebar/TodoFolder.tsx","components/Sidebar/Sidebar.tsx","utils/helpers.ts","components/Content/TodoItem.tsx","components/Content/ContentFolder.tsx","components/Content/AddTodoForm.tsx","components/Content/Content.tsx","App.tsx","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","Input","onBlur","value","className","placeholder","onSubmit","setValue","maxLenght","autoFocus","classNames","onChange","event","newValue","currentTarget","length","onKeyDown","key","connect","addFolder","title","colorName","type","hideFormFolderCreactor","useState","inputValue","setInputValue","colorId","setColorId","handleAddNewFolder","colorList","colors","handleChangeColor","id","onClick","map","color","index","TodoFolder","currentFolderId","setFolderId","deleteFolder","isShowAllFolders","state","folders","folderId","showAllFolders","formDisplay","toggleFormDisplay","src","listSvg","alt","folder","findFolderIdOfState","actionId","indexOf","find","compliteTodo","todoId","deleleTodo","complited","text","checked","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","ContentFolder","todos","setFolderTitle","titleFormIsOpen","setTitleFormIsOpen","titleValue","setTitleValue","classTitle","useEffect","handleChangeTitle","points","todo","AddTodoForm","hideTodoForm","addTodo","todoValue","setTodoValue","handleAddTodo","folderTitle","todoForm","setTodoForm","localStorage","setItem","JSON","stringify","toString","persistedState","parse","getItem","Number","rootReducer","action","foldersLenght","newFolder","newTodo","stateCopy","push","newState","filter","newId","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","_state","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e5a61e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/list.244e2000.svg\";","import React from 'react'\nimport classNames from 'classnames'\n\ntype Props = {\n  value: string,\n  className?: string,\n  placeholder?: string,\n  maxLenght?: number\n\n  setValue: (newValue: string) => void,\n  onSubmit: () => void\n}\nconst Input: React.FC<Props & React.InputHTMLAttributes<HTMLInputElement>> = ({ onBlur, value, className, placeholder = '...', onSubmit, setValue, maxLenght = 50 }) => {\n\n  const onChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.currentTarget.value\n    if (newValue.length <= maxLenght) {\n      setValue(newValue)\n    }\n  }\n\n  const handleEnterDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onSubmit()\n    }\n  }\n\n  return (\n    <input autoFocus placeholder={placeholder}\n      className={classNames('input', className)}\n      value={value} onChange={onChangeValue}\n      onBlur={onBlur}\n      onKeyDown={handleEnterDown}\n    />\n  )\n}\nexport default Input","import React, { useState } from 'react'\nimport classNames from 'classnames'\nimport { connect } from 'react-redux'\nimport { RootState } from './../../redux/store'\nimport { addFolder } from './../../redux/actions'\n\nimport colorList from './../../assets/colorList.json'\nimport Input from '../common/Input'\n\ntype StateProps = {}\ntype DispatchProps = {\n  addFolder: (text: string, color: string) => void\n}\ntype OwnProps = {\n  hideFormFolderCreactor: () => void;\n}\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst AddFolderForm: React.FC<Props> = ({ hideFormFolderCreactor, addFolder }) => {\n  const maxLenght = 30\n  const [inputValue, setInputValue] = useState<string>('')\n  const [colorId, setColorId] = useState<number>(0)\n\n  const handleAddNewFolder = () => {\n    if (inputValue.length > 0 && inputValue.length <= maxLenght) {\n      addFolder(inputValue, colorList.colors[colorId])\n      setInputValue('')\n      hideFormFolderCreactor()\n    }\n  }\n\n  const handleChangeColor = (id: number = 0) => () => {\n    setColorId(id)\n  }\n\n  return (\n    <div className='sidebar__create-folder-form'>\n      <button className='btn btn-close' onClick={hideFormFolderCreactor}>&times;</button>\n      <Input value={inputValue} setValue={setInputValue} maxLenght={maxLenght} placeholder='Название папки' onSubmit={handleAddNewFolder}/>\n\n      <div className='sidebar-colors'>\n        {colorList.colors.map((color, index) => {\n          return <button key={color} onClick={handleChangeColor(index)}\n            className={classNames('sidebar-colors__item', 'color-' + color, { 'active': colorId === index })}></button>\n        })}\n      </div>\n\n      <button className='btn btn-submit w100' onClick={handleAddNewFolder}>Добавить</button>\n    </div>\n  )\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>\n  (null, { addFolder })(AddFolderForm)","export const FOLDER_ADD = 'FOLDER:ADD'\nexport const FOLDER_DELETE = 'FODLER:DELETE'\nexport const SET_FOLDER_ID = 'FOLDER:SET-ID'\nexport const SET_FOLDER_TITLE = 'FOLDER:SET-TITLE'\n\nexport const TODO_ADD = 'TODO:ADD'\nexport const TODO_COMPLITE = 'TODO:COMPLITE'\nexport const TODO_DELETE = 'TODO:DELETE'\n\nexport const SHOW_ALL_FOLDERS = 'SHOW-ALL-FOLDERS:ON'\n\n\nexport type RootAction = AddFolder | AddTodo | SetFolderId |\n  CompliteTodo | DeleleTodo | DeleteFolder | ShowAllFolders | SetFolderTitle\n\ntype AddFolder = { type: typeof FOLDER_ADD, title: string, colorName: string }\nexport const addFolder = (title: string, colorName: string = 'default'): AddFolder => {\n  return {\n    type: FOLDER_ADD,\n    title,\n    colorName\n  }\n}\n\ntype SetFolderId = { type: typeof SET_FOLDER_ID, id: number }\nexport const setFolderId = (id: number): SetFolderId => {\n  return {\n    type: SET_FOLDER_ID,\n    id\n  }\n}\n\ntype AddTodo = { type: typeof TODO_ADD, folderId: number, text: string }\nexport const addTodo = (folderId: number, text: string): AddTodo => {\n  return {\n    type: TODO_ADD,\n    folderId,\n    text\n  }\n}\n\ntype CompliteTodo = { type: typeof TODO_COMPLITE, folderId: number, todoId: number }\nexport const compliteTodo = (folderId: number, todoId: number): CompliteTodo => {\n  return {\n    type: TODO_COMPLITE,\n    folderId,\n    todoId\n  }\n}\n\ntype DeleleTodo = { type: typeof TODO_DELETE, folderId: number, todoId: number }\nexport const deleleTodo = (folderId: number, todoId: number): DeleleTodo => {\n  return {\n    type: TODO_DELETE,\n    folderId,\n    todoId\n  }\n}\n\ntype DeleteFolder = { type: typeof FOLDER_DELETE, folderId: number }\nexport const deleteFolder = (folderId: number): DeleteFolder => {\n  return {\n    type: FOLDER_DELETE,\n    folderId\n  }\n}\n\ntype ShowAllFolders = { type: typeof SHOW_ALL_FOLDERS }\nexport const showAllFolders = (): ShowAllFolders => {\n  return { type: SHOW_ALL_FOLDERS }\n}\n\ntype SetFolderTitle = { type: typeof SET_FOLDER_TITLE, folderId: number, folderTitle: string }\nexport const setFolderTitle = (folderId: number, folderTitle: string): SetFolderTitle => {\n  return { type: SET_FOLDER_TITLE, folderId, folderTitle }\n}","import React from 'react'\nimport classNames from 'classnames'\n\ntype Props = {\n  id: number,\n  title: string,\n  color: string,\n  isShowAllFolders: boolean,\n  currentFolderId: number | null,\n  setFolderId: (folderId: number) => void,\n  deleteFolder: (folderId: number) => void\n}\n\nconst TodoFolder: React.FC<Props> = ({ title, color, id, currentFolderId, setFolderId, deleteFolder, isShowAllFolders }) => {\n  const handleFolderClick = () => {\n    if (id !== currentFolderId) setFolderId(id)\n  }\n\n  const handlerFolderRemove = () => {\n    deleteFolder(id)\n  }\n\n  return (\n    <div className={'sidebar-content__item-wrapper'}>\n      <div className={classNames('sidebar-content__item', { 'active': currentFolderId === id && !isShowAllFolders })} onClick={handleFolderClick}>\n        <i className={classNames('sidebar-content__item-color', `color-${color}`)}></i>\n        <span className='sidebar-content__item-title'>{title}</span>\n      </div>\n      <button className='btn btn-remove d-none' onClick={handlerFolderRemove}>&times;</button>\n    </div>\n  )\n}\n\nexport default TodoFolder","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames'\n\nimport { Folder } from '../../types';\nimport { RootState } from '../../redux/store';\nimport { setFolderId, deleteFolder, showAllFolders } from '../../redux/actions';\n\nimport listSvg from '../../assets/icons/list.svg';\nimport AddFolderForm from './AddFolderForm';\nimport TodoFolder from './TodoFolder';\n\ntype StateProps = {\n  folders: Folder[],\n  currentFolderId: number | null,\n  isShowAllFolders: boolean\n}\ntype DispatchProps = {\n  setFolderId: (id: number) => void,\n  deleteFolder: (folderId: number) => void,\n  showAllFolders: () => void\n}\ntype OwnProps = {}\n\ntype Props = OwnProps & StateProps & DispatchProps\n\nconst Sidebar: React.FC<Props> = ({ setFolderId, folders, currentFolderId, deleteFolder, showAllFolders, isShowAllFolders }) => {\n  const [formDisplay, toggleFormDisplay] = useState<boolean>(false)\n\n  const showFormFolderCreactor = () => {\n    toggleFormDisplay(true)\n  }\n\n  const hideFormFolderCreactor = () => {\n    toggleFormDisplay(false)\n  }\n\n  const hideFormShowAllFolders = () => {\n    showAllFolders()\n  }\n\n  return (\n    <aside className=\"sidebar\">\n      <div className=\"sidebar-content\">\n        {folders.length > 1 &&\n          <div className={classNames('sidebar-content__item', 'sidebar-content__item-all-todos', { 'active': isShowAllFolders })} onClick={hideFormShowAllFolders}>\n            <i className={'sidebar-content__item-img'}> <img src={listSvg} alt=\"list\" /> </i>\n            <span className='sidebar-content__item-title'>Все задачи</span>\n          </div>\n        }\n\n        {folders.map(folder => <TodoFolder key={folder.id} deleteFolder={deleteFolder} title={folder.title} color={folder.color}\n          id={folder.id} setFolderId={setFolderId} currentFolderId={currentFolderId} isShowAllFolders={isShowAllFolders} />)}\n      </div>\n\n      <div className=\"sidebar__create-folder\">\n        <button className='btn sidebar__create-folder-btn' onClick={showFormFolderCreactor}><i>+</i> Добавить Папку</button>\n        {formDisplay && <AddFolderForm hideFormFolderCreactor={hideFormFolderCreactor} />}\n      </div>\n    </aside>\n  )\n}\n\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState, { setFolderId, deleteFolder, showAllFolders })(Sidebar)","import { Folder } from './../types';\n\nexport const findFolderIdOfState = (folders: Folder[], actionId: number) => {\n  return folders.indexOf(folders.find(folder => folder.id === actionId) as Folder)\n}","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { RootState } from '../../redux/store'\nimport { compliteTodo, deleleTodo } from '../../redux/actions'\n\ntype OwnProps = {\n  todoId: number,\n  folderId: number,\n  text: string,\n  complited: boolean\n}\ntype StateProps = {}\ntype DispathProps = {\n  compliteTodo: (folderId: number, todoId: number) => void,\n  deleleTodo: (folderId: number, todoId: number) => void\n}\ntype Props = OwnProps & DispathProps & StateProps\n\nconst TodoItem: React.FC<Props> = ({ folderId, todoId, complited, text, compliteTodo, deleleTodo }) => {\n  const handleChangeCompleted = () => {\n    compliteTodo(folderId, todoId)\n  }\n\n  const handleTodoDelete = () => {\n    deleleTodo(folderId, todoId)\n  }\n\n  return (\n    <div className='todo-item'>\n      <label className='todo-item-content'>\n        <input type=\"checkbox\" checked={complited} onChange={handleChangeCompleted} />\n        <span className=\"checkbox\">\n          <svg\n            width=\"11\"\n            height=\"8\"\n            viewBox=\"0 0 11 8\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\n              stroke=\"#fff\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </span>\n        <span className='todo-item-content__text'>{text}</span>\n      </label>\n\n      <button className='btn btn-remove' onClick={handleTodoDelete}>&times;</button>\n    </div>\n  )\n}\n\nexport default connect<StateProps, DispathProps, OwnProps, RootState>(null, { compliteTodo, deleleTodo })(TodoItem)","import React, { useState, useEffect } from 'react'\nimport classNames from 'classnames'\n\nimport { Todo } from '../../types'\nimport TodoItem from './TodoItem'\nimport Input from '../common/Input'\n\ntype Props = {\n  folderId: number,\n  todos: Todo[],\n  title: string,\n  color: string,\n  setFolderTitle: (folderId: number, folderTitle: string) => void\n}\n\nconst ContentFolder: React.FC<Props> = ({ todos, title, color, folderId, setFolderTitle }) => {\n  const maxLenght = 30\n  const [titleFormIsOpen, setTitleFormIsOpen] = useState<boolean>(false)\n  const [titleValue, setTitleValue] = useState<string>(title)\n\n  const classTitle: string = classNames('content-folder__title', `color-${color}`)\n\n  useEffect(() => {\n    setTitleValue(title)\n  }, [title])\n\n  const handleChangeTitle = () => {\n    setTitleFormIsOpen(false)\n    if (titleValue !== title && titleValue.length <= maxLenght) {\n      const newTitle = titleValue === '' ? 'Без названия' : titleValue\n      setFolderTitle(folderId, newTitle)\n    }\n  }\n\n  const onTitleClick = () => {\n    if (titleValue === 'Без названия') {\n      setTitleValue('')\n    }\n    setTitleFormIsOpen(true)\n  }\n\n  return (\n    <div className=\"content-folder\">\n      {titleFormIsOpen\n        ? <Input className={classTitle} onBlur={handleChangeTitle} placeholder='Название папки' onSubmit={handleChangeTitle} value={titleValue} setValue={setTitleValue} />\n\n        : <h3 onClick={onTitleClick} className={classTitle}>\n          <span>{title}</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 383.947 383.947\"\n            width=\"20px\" height=\"20px\"\n            fill=\"#DFDFDF\"\n          ><g>\n              <polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893\" />\n              <path\n                d=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04 C386.027,77.92,386.027,64.373,377.707,56.053z\"\n              />\n            </g>\n          </svg>\n        </h3>\n      }\n\n      <div className=\"hr\"></div>\n\n      {todos.length > 0 && <div className=\"content-folder__todos\">\n        {todos.map(todo => <TodoItem key={folderId + '_' + todo.id} folderId={folderId} text={todo.text} todoId={todo.id} complited={todo.complited} />)}\n      </div>}\n    </div>\n  )\n}\n\nexport default ContentFolder","import React, { useState } from 'react'\nimport Input from '../common/Input'\n\ntype Props = {\n  folderId: number,\n  hideTodoForm: () => void,\n  addTodo: (folderId: number, text: string) => void\n}\nconst AddTodoForm: React.FC<Props> = ({ hideTodoForm, addTodo, folderId }) => {\n  const maxTodoLenght = 50\n  const [todoValue, setTodoValue] = useState<string>('')\n\n  const handleAddTodo = () => {\n    if (todoValue.length > 0 && todoValue.length <= maxTodoLenght) {\n      addTodo(folderId, todoValue)\n      setTodoValue('')\n    }\n  }\n\n  return (\n    <div className='content-todo-form'>\n      <Input placeholder='Текст задачи' onSubmit={handleAddTodo} value={todoValue} setValue={setTodoValue} maxLenght={maxTodoLenght} />\n      <button className='btn btn-submit' onClick={handleAddTodo}>Добавить Задачу</button>\n      <button className='btn btn-cancel' onClick={hideTodoForm}>Отменить</button>\n    </div>\n  )\n}\n\nexport default AddTodoForm","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Folder } from '../../types'\nimport { findFolderIdOfState } from '../../utils/helpers'\nimport { RootState } from '../../redux/store'\nimport { addTodo, setFolderTitle } from '../../redux/actions'\n\nimport ContentFolder from './ContentFolder'\nimport AddTodoForm from './AddTodoForm'\n\ntype OwnProps = {}\ntype StateProps = {\n  folders: Folder[]\n  currentFolderId: number | null\n  isShowAllFolders: boolean\n}\ntype DispatchProps = {\n  addTodo: (folderId: number, text: string) => void\n  setFolderTitle: (folderId: number, folderTitle: string) => void\n}\ntype Props = OwnProps & StateProps & DispatchProps\n\nconst Content: React.FC<Props> = ({ addTodo, folders, currentFolderId, isShowAllFolders, setFolderTitle }) => {\n  const [todoForm, setTodoForm] = useState<boolean>(false)\n  const folderId: number = findFolderIdOfState(folders, currentFolderId!)\n\n  const showTodoForm = () => {\n    setTodoForm(true)\n  }\n\n  const hideTodoForm = () => {\n    setTodoForm(false)\n  }\n\n  return (\n    <main className=\"content\">\n      {folders.length\n        ? <div className=\"content-folder\">\n          {isShowAllFolders || folderId < 0\n            ? folders.map(folder => {\n              if (folder.todos.length === 0) return null\n              return <ContentFolder key={folder.id}\n                todos={folder.todos}\n                color={folder.color}\n                title={folder.title}\n                folderId={folder.id}\n                setFolderTitle={setFolderTitle} />\n            })\n            : <>\n              <ContentFolder todos={folders[folderId].todos}\n                color={folders[folderId].color}\n                title={folders[folderId].title}\n                folderId={folders[folderId].id}\n                setFolderTitle={setFolderTitle} />\n\n              {todoForm\n                ? <AddTodoForm hideTodoForm={hideTodoForm} addTodo={addTodo} folderId={folderId} />\n                : <button className=\"btn content-folder__add-btn\" onClick={showTodoForm}><i>+</i>Новая задача</button>\n              }\n            </>\n          }\n        </div>\n        : <p className='content__empty'>Задачи отсутствуют</p>\n      }\n    </main>\n  )\n}\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState, { addTodo, setFolderTitle })(Content)","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\n\nimport './styles/style.scss';\n\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Content from './components/Content/Content'\nimport { Folder } from './types';\nimport { RootState } from './redux/store';\n\ntype DispatchProps = {}\ntype OwnProps = {}\ntype StateProps = {\n  folders: Folder[],\n  currentFolderId: number | null,\n  isShowAllFolders: boolean\n}\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst App: React.FC<Props> = ({folders, currentFolderId, isShowAllFolders}) => {\n  useEffect(() => {\n    localStorage.setItem('folders', JSON.stringify(folders))\n  }, [folders])\n\n  useEffect(() => {\n    localStorage.setItem('currentFolderId', currentFolderId !== null ? currentFolderId.toString() : '')\n  }, [currentFolderId])\n\n  useEffect(() => {\n    localStorage.setItem('isShowAllFolders', isShowAllFolders ? 'true' : 'false')\n  }, [isShowAllFolders])\n\n  return (\n    <div className='app'>\n      <Sidebar />\n      <Content />\n    </div>\n  );\n}\n\nconst mapState = (state: StateProps) => {\n  return {\n    folders: state.folders,\n    currentFolderId: state.currentFolderId,\n    isShowAllFolders: state.isShowAllFolders\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(mapState)(App);","import { Folder, Todo } from './../types';\nimport { findFolderIdOfState } from '../utils/helpers';\nimport {\n  RootAction, TODO_ADD, FOLDER_ADD, SET_FOLDER_ID, TODO_COMPLITE,\n  TODO_DELETE, FOLDER_DELETE, SHOW_ALL_FOLDERS, SET_FOLDER_TITLE\n} from './actions';\n\nconst initialState = {\n  folders: [] as Folder[],\n  currentFolderId: null as number | null,\n  isShowAllFolders: false as boolean\n}\nexport type InitialState = typeof initialState\n\nconst persistedState: InitialState = {\n  folders: JSON.parse(localStorage.getItem('folders') || ''),\n  currentFolderId: localStorage.getItem('currentFolderId') !== '' ? Number(localStorage.getItem('currentFolderId')) : null,\n  isShowAllFolders: localStorage.getItem('isShowAllFolders') === 'true' ? true : false\n}\n\nconst rootReducer = (state = persistedState, action: RootAction): InitialState => {\n  switch (action.type) {\n    case FOLDER_ADD: {\n      const foldersLenght = state.folders.length\n      const newFolder: Folder = {\n        id: foldersLenght ? state.folders[foldersLenght - 1].id + 1 : 0,\n        color: action.colorName,\n        title: action.title,\n        todos: []\n      }\n      return {\n        ...state,\n        folders: [...state.folders, newFolder],\n        currentFolderId: newFolder.id,\n        isShowAllFolders: !state.folders.length && false\n      }\n    }\n\n    case TODO_ADD: {\n      let newTodo: Todo = {\n        id: state.folders[action.folderId].todos.length,\n        text: action.text,\n        complited: false\n      }\n      const stateCopy = { ...state, folders: [...state.folders] }\n      stateCopy.folders[action.folderId].todos.push(newTodo)\n      return stateCopy\n    }\n\n    case SET_FOLDER_ID: {\n      return {\n        ...state,\n        currentFolderId: action.id,\n        isShowAllFolders: false\n      }\n    }\n\n    case TODO_COMPLITE: {\n      const stateCopy = { ...state, folders: [...state.folders] }\n      const folderId = findFolderIdOfState(state.folders, action.folderId)\n      stateCopy.folders[folderId].todos.map(todo => todo.id === action.todoId ? todo.complited = !todo.complited : todo)\n      return stateCopy\n    }\n\n    case TODO_DELETE: {\n      const newState = { ...state, folders: [...state.folders] }\n      const todos: Todo[] = state.folders[action.folderId].todos.filter(todo => todo.id !== action.todoId)\n      newState.folders[action.folderId].todos = todos\n\n      return newState\n    }\n\n    case FOLDER_DELETE: {\n      let newId: number | null = null\n      if (state.folders.length < 2) {\n        newId = null\n      } else {\n        const folderId = findFolderIdOfState(state.folders, action.folderId)\n        newId = state.folders[folderId - 1] ? state.folders[folderId - 1].id : 0\n      }\n      return {\n        ...state,\n        folders: state.folders.length > 1 ? state.folders.filter(folder => folder.id !== action.folderId) : [],\n        currentFolderId: newId,\n        isShowAllFolders: newId === null ? true : false\n      }\n    }\n\n    case SHOW_ALL_FOLDERS: {\n      return {\n        ...state,\n        isShowAllFolders: true,\n        currentFolderId: null\n      }\n    }\n\n    case SET_FOLDER_TITLE: {\n      return {\n        ...state,\n        folders: state.folders.map(folder => folder.id === action.folderId ? { ...folder, title: action.folderTitle } : folder)\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer","import { createStore } from 'redux'\nimport rootReducer from './rootReducer'\n\nconst store = createStore(\n  rootReducer,\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n// @ts-ignore\nwindow._state = store.getState()\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}